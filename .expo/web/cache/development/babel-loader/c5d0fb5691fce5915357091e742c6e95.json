{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport createDataContext from \"./createDataContext\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar KEY = 'saved_feed';\n\nvar saveFeeds = function saveFeeds(value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function saveFeeds$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          jsonValue = JSON.stringify(value);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(KEY, jsonValue));\n\n        case 4:\n          console.log('Feed salvo!');\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('erro: ' + _context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nvar clearStorage = function clearStorage() {\n  return _regeneratorRuntime.async(function clearStorage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n        case 3:\n          alert('Todos os feeds foram apagados');\n          _context2.next = 11;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          alert('Algum problema ao limpar armazenamento');\n          console.log('erro: ' + _context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nvar getMyFeed = function getMyFeed() {\n  var jsonValue;\n  return _regeneratorRuntime.async(function getMyFeed$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(KEY));\n\n        case 3:\n          jsonValue = _context3.sent;\n          console.log('FEED = ' + jsonValue);\n          return _context3.abrupt(\"return\", jsonValue != null ? JSON.parse(jsonValue) : null);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          alert(\"Algum problema ao buscar um feed\");\n\n        case 11:\n          console.log('Done.');\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar getAllKeys = function getAllKeys() {\n  var keys;\n  return _regeneratorRuntime.async(function getAllKeys$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          keys = [];\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n        case 4:\n          keys = _context4.sent;\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](1);\n          alert('Houve algum erro ao recuperar os feeds');\n          console.log('Erro: ' + _context4.t0);\n\n        case 11:\n          console.log(keys);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};\n\nvar deleteItem = function deleteItem() {\n  return _regeneratorRuntime.async(function deleteItem$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@key'));\n\n        case 3:\n          _context5.next = 9;\n          break;\n\n        case 5:\n          _context5.prev = 5;\n          _context5.t0 = _context5[\"catch\"](0);\n          alert('Houve algum problema ao apagar o feed');\n          console.log('Erro: ' + _context5.t0);\n\n        case 9:\n          console.log('Done.');\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar feedListReducer = function feedListReducer(state, action) {\n  var newState = [];\n\n  switch (action.type) {\n    case 'add_feed':\n      newState = [].concat(_toConsumableArray(state), [{\n        urlFeed: action.payload.urlFeed,\n        titulo: action.payload.titulo\n      }]);\n      saveFeeds(newState);\n      return newState;\n\n    case 'delete_feed':\n      newState = state.filter(function (feed) {\n        return feed.urlFeed !== action.payload;\n      });\n      deleteItem(newState);\n      return newState;\n\n    case 'restore_state':\n      newState = action.payload;\n      return newState;\n\n    case 'delete_all':\n      clearStorage();\n      return [];\n\n    case 'get_feed':\n      newState = state.filter(function (feed) {\n        return feed.urlFeed !== action.payload;\n      });\n      return newState;\n\n    case 'get_all':\n      return getAllKeys();\n\n    default:\n      return state;\n  }\n};\n\nvar addFeed = function addFeed(dispatch) {\n  return function (titulo, urlFeed, callback) {\n    dispatch({\n      type: 'add_feed',\n      payload: {\n        titulo: titulo,\n        urlFeed: urlFeed\n      }\n    });\n\n    if (callback) {\n      callback();\n    }\n\n    console.log('Titulo e Feed ' + titulo + ' ' + urlFeed);\n  };\n};\n\nvar getFeed = function getFeed(dispatch) {\n  return function (id, callback) {\n    dispatch({\n      type: 'get_feed',\n      payload: id\n    });\n\n    if (callback) {\n      callback();\n    }\n\n    console.log('Feed i: ' + id);\n  };\n};\n\nvar getFeeds = function getFeeds(dispatch) {\n  return function _callee() {\n    var savedState;\n    return _regeneratorRuntime.async(function _callee$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(KEY));\n\n          case 3:\n            savedState = _context6.sent;\n\n            if (savedState) {\n              _context6.next = 8;\n              break;\n            }\n\n            console.log('não tem nada salvo');\n            _context6.next = 11;\n            break;\n\n          case 8:\n            dispatch({\n              type: 'get_all',\n              payload: JSON.parse(savedState)\n            });\n            console.log(savedState);\n            return _context6.abrupt(\"return\", savedState);\n\n          case 11:\n            _context6.next = 16;\n            break;\n\n          case 13:\n            _context6.prev = 13;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log('erro: ' + _context6.t0);\n\n          case 16:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};\n\nvar deleteFeed = function deleteFeed(dispatch) {\n  return function (id) {\n    dispatch({\n      type: 'delete_feed',\n      payload: id\n    });\n    console.log('deletou o feed');\n  };\n};\n\nvar restoreState = function restoreState(dispatch) {\n  return function _callee2() {\n    var savedState;\n    return _regeneratorRuntime.async(function _callee2$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(KEY));\n\n          case 3:\n            savedState = _context7.sent;\n\n            if (!savedState) {\n              console.log('não tem nada salvo');\n            } else {\n              dispatch({\n                type: 'restore_state',\n                payload: JSON.parse(savedState)\n              });\n            }\n\n            _context7.next = 10;\n            break;\n\n          case 7:\n            _context7.prev = 7;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.log('erro: ' + _context7.t0);\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\n\nvar deleteAll = function deleteAll(dispatch) {\n  return function () {\n    dispatch({\n      type: 'delete_all'\n    });\n    console.log('Apagou tudo!');\n  };\n};\n\nvar rssFeeds = [{\n  titulo: 'G1 - Todas as notícias',\n  urlFeed: 'http://g1.globo.com/dynamo/rss2.xml',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}];\n\nvar _createDataContext = createDataContext(feedListReducer, {\n  addFeed: addFeed,\n  deleteFeed: deleteFeed,\n  restoreState: restoreState,\n  deleteAll: deleteAll,\n  getFeeds: getFeeds,\n  getFeed: getFeed,\n  getAllKeys: getAllKeys,\n  getMyFeed: getMyFeed\n}, rssFeeds),\n    Context = _createDataContext.Context,\n    Provider = _createDataContext.Provider;\n\nexport { Context, Provider };","map":{"version":3,"sources":["E:/ResidenciaDEV/ReactNative/rss-react-native/src/context/FeedListContext.js"],"names":["createDataContext","AsyncStorage","KEY","saveFeeds","value","jsonValue","JSON","stringify","setItem","console","log","clearStorage","clear","alert","getMyFeed","getItem","parse","getAllKeys","keys","deleteItem","removeItem","feedListReducer","state","action","newState","type","urlFeed","payload","titulo","filter","feed","addFeed","dispatch","callback","getFeed","id","getFeeds","savedState","deleteFeed","restoreState","deleteAll","rssFeeds","descricao","urlSite","urlImagem","Context","Provider"],"mappings":"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","sourcesContent":["import createDataContext from './createDataContext';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst KEY = 'saved_feed';\r\n//Método da biblioteca AsyncStore. Ela só salva String, portanto para salvar \r\n//objetos é preciso serializá-los para JSON.\r\nconst saveFeeds = async (value) => {\r\n    try {\r\n        const jsonValue = JSON.stringify(value);\r\n        await AsyncStorage.setItem(KEY, jsonValue);\r\n        console.log('Feed salvo!');\r\n    } catch (e) {\r\n        console.log('erro: ' + e);\r\n    }\r\n}\r\n\r\n//Limpar os dados armazenados com a função própria clear\r\nconst clearStorage = async () => {\r\n    try {\r\n        await AsyncStorage.clear();\r\n        alert('Todos os feeds foram apagados');\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n        alert('Algum problema ao limpar armazenamento');\r\n        console.log('erro: ' + e);\r\n    }\r\n}\r\n\r\n//Pegar um objeto armazenado\r\nconst getMyFeed = async () => {\r\n    try {\r\n      const jsonValue = await AsyncStorage.getItem(KEY)\r\n      console.log('FEED = ' + jsonValue)\r\n      return jsonValue != null ? JSON.parse(jsonValue) : null\r\n      \r\n    } catch(e) {\r\n      alert(\"Algum problema ao buscar um feed\");\r\n    }\r\n  \r\n    console.log('Done.')\r\n  \r\n  }\r\n\r\n  //Vai buscar todas as chaves armazenadas no AsyncStorage\r\n  const getAllKeys = async () => {\r\n    let keys = []\r\n    try {\r\n      keys = await AsyncStorage.getAllKeys()\r\n    } catch(e) {\r\n      alert('Houve algum erro ao recuperar os feeds');\r\n      console.log('Erro: ' + e);\r\n    }\r\n    console.log(keys)\r\n  }\r\n\r\n  const deleteItem = async () => {\r\n    try {\r\n        await AsyncStorage.removeItem('@key')\r\n      } catch(e) {\r\n        alert('Houve algum problema ao apagar o feed');\r\n        console.log('Erro: ' + e);\r\n      }\r\n    \r\n      console.log('Done.')\r\n  }\r\n\r\nconst feedListReducer = (state, action) => {\r\n    let newState = [];\r\n    switch (action.type) {\r\n        case 'add_feed':\r\n            newState = [\r\n                ...state,\r\n                {\r\n                    urlFeed: action.payload.urlFeed,\r\n                    titulo: action.payload.titulo\r\n                }\r\n            ]; \r\n            saveFeeds(newState)\r\n            return newState;\r\n        case 'delete_feed':\r\n            newState = state.filter(\r\n                (feed) => feed.urlFeed !== action.payload);\r\n            \r\n            deleteItem(newState);\r\n            return newState;\r\n        case 'restore_state':\r\n            newState = action.payload;\r\n            return newState;\r\n        case 'delete_all':\r\n            clearStorage();\r\n            return [];\r\n        case 'get_feed':\r\n            newState = state.filter(\r\n                (feed) => feed.urlFeed !== action.payload);\r\n            return newState;\r\n        case 'get_all':\r\n            return getAllKeys();\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst addFeed = dispatch => {\r\n    return (titulo, urlFeed, callback) => {\r\n        dispatch({ type: 'add_feed', payload: { titulo, urlFeed } });\r\n        if (callback) {\r\n            callback();\r\n        }\r\n        console.log('Titulo e Feed ' + titulo + ' ' + urlFeed);\r\n    };\r\n};\r\n\r\nconst getFeed = dispatch =>{\r\n    return(id, callback) => {\r\n        dispatch({type: 'get_feed', payload: id });\r\n        if(callback){\r\n            callback();\r\n        }\r\n        console.log('Feed i: ' + id);\r\n    }\r\n}\r\n\r\nconst getFeeds = dispatch => async () => {\r\n    try {\r\n        const savedState = await AsyncStorage.getItem(KEY);\r\n        if (!savedState) {\r\n            console.log('não tem nada salvo');\r\n        }\r\n        else {\r\n            dispatch({ type: 'get_all', payload: JSON.parse(savedState) })\r\n            console.log(savedState);\r\n            return savedState;\r\n\r\n        }\r\n    } catch (e) {\r\n        console.log('erro: ' + e);\r\n    }\r\n}\r\n\r\nconst deleteFeed = dispatch => {\r\n    return (id) => {\r\n        dispatch({ type: 'delete_feed', payload: id });\r\n        console.log('deletou o feed');\r\n    };\r\n};\r\n\r\nconst restoreState = dispatch => async () => {\r\n    try {\r\n        const savedState = await AsyncStorage.getItem(KEY);\r\n        if (!savedState) {\r\n            console.log('não tem nada salvo');\r\n        }\r\n        else {\r\n            //console.log(savedState);\r\n            dispatch({ type: 'restore_state', payload: JSON.parse(savedState) })\r\n        }\r\n    } catch (e) {\r\n        console.log('erro: ' + e);\r\n    }\r\n}\r\n\r\nconst deleteAll = dispatch => {\r\n    return () => {\r\n        dispatch({ type: 'delete_all' })\r\n        console.log('Apagou tudo!');\r\n    }\r\n}\r\n\r\nconst rssFeeds = [\r\n    {\r\n        titulo: 'G1 - Todas as notícias',\r\n        urlFeed: 'http://g1.globo.com/dynamo/rss2.xml',\r\n        descricao: '',\r\n        urlSite: '',\r\n        urlImagem: ''\r\n    }\r\n];\r\n\r\nexport const { Context, Provider } = createDataContext(\r\n    feedListReducer,\r\n    { addFeed, deleteFeed, restoreState, deleteAll, getFeeds, getFeed, getAllKeys, getMyFeed }, \r\n    rssFeeds\r\n);\r\n"]},"metadata":{},"sourceType":"module"}