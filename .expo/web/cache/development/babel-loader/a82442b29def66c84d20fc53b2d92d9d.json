{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport createDataContext from \"./createDataContext\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nvar saveFeeds = function saveFeeds(value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function saveFeeds$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          jsonValue = JSON.stringify(value);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('key', jsonValue));\n\n        case 4:\n          console.log('Feed salvo!');\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('erro: ' + _context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nvar clearStorage = function clearStorage() {\n  return _regeneratorRuntime.async(function clearStorage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n        case 3:\n          alert('Todos os feeds foram apagados');\n          _context2.next = 11;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          alert('Algum problema ao limpar armazenamento');\n          console.log('erro: ' + _context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\ngetMyFeed = function getMyFeed() {\n  var jsonValue;\n  return _regeneratorRuntime.async(function getMyFeed$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@key'));\n\n        case 3:\n          jsonValue = _context3.sent;\n          return _context3.abrupt(\"return\", jsonValue != null ? JSON.parse(jsonValue) : null);\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          alert(\"Algum problema ao buscar um feed\");\n\n        case 10:\n          console.log('Done.');\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\ngetAllKeys = function getAllKeys() {\n  var keys;\n  return _regeneratorRuntime.async(function getAllKeys$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          keys = [];\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n        case 4:\n          keys = _context4.sent;\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](1);\n          alert('Houve algum erro ao recuperar os feeds');\n          console.log('Erro: ' + _context4.t0);\n\n        case 11:\n          console.log(keys);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};\n\ndeleteItem = function deleteItem() {\n  return _regeneratorRuntime.async(function deleteItem$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem('@key'));\n\n        case 3:\n          _context5.next = 9;\n          break;\n\n        case 5:\n          _context5.prev = 5;\n          _context5.t0 = _context5[\"catch\"](0);\n          alert('Houve algum problema ao apagar o feed');\n          console.log('Erro: ' + _context5.t0);\n\n        case 9:\n          console.log('Done.');\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar feedListReducer = function feedListReducer(state, action) {\n  var newState = [];\n\n  switch (action.type) {\n    case 'add_feed':\n      newState = [].concat(_toConsumableArray(state), [{\n        urlFeed: action.payload.urlFeed,\n        titulo: action.payload.titulo\n      }]);\n      saveFeeds(newState);\n      return newState;\n\n    case 'delete_feed':\n      newState = state.filter(function (feed) {\n        return feed.urlFeed !== action.payload;\n      });\n      deleteItem(newState);\n      return newState;\n\n    case 'restore_state':\n      newState = action.payload;\n      return newState;\n\n    case 'delete_all':\n      clearStorage();\n      return [];\n\n    case 'get_feed':\n      newState = state.filter(function (feed) {\n        return feed.urlFeed !== action.payload;\n      });\n      getMyFeed(newState);\n      return newState;\n\n    case 'get_all':\n      return getAllKeys();\n\n    default:\n      return state;\n  }\n};\n\nvar addFeed = function addFeed(dispatch) {\n  return function (titulo, urlFeed, callback) {\n    dispatch({\n      type: 'add_feed',\n      payload: {\n        titulo: titulo,\n        urlFeed: urlFeed\n      }\n    });\n\n    if (callback) {\n      callback();\n    }\n\n    console.log('Salvou o feed');\n  };\n};\n\nvar getFeed = function getFeed(dispatch) {\n  return function (id, callback) {\n    dispatch({\n      type: 'get_feed',\n      payload: id\n    });\n\n    if (callback) {\n      callback();\n    }\n\n    console.log('Feed i: ' + id);\n  };\n};\n\nvar getAllFeed = function getAllFeed(dispatch) {\n  return function () {\n    dispatch({\n      type: 'get_all'\n    });\n  };\n};\n\nvar deleteFeed = function deleteFeed(dispatch) {\n  return function (id) {\n    dispatch({\n      type: 'delete_feed',\n      payload: id\n    });\n    console.log('deletou o feed');\n  };\n};\n\nvar restoreState = function restoreState(dispatch) {\n  return function _callee() {\n    var savedState;\n    return _regeneratorRuntime.async(function _callee$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(KEY));\n\n          case 3:\n            savedState = _context6.sent;\n\n            if (!savedState) {\n              console.log('não tem nada salvo');\n            } else {\n              dispatch({\n                type: 'restore_state',\n                payload: JSON.parse(savedState)\n              });\n            }\n\n            _context6.next = 10;\n            break;\n\n          case 7:\n            _context6.prev = 7;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log('erro: ' + _context6.t0);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\n\nvar deleteAll = function deleteAll(dispatch) {\n  return function () {\n    dispatch({\n      type: 'delete_all'\n    });\n    console.log('Apagou tudo!');\n  };\n};\n\nvar rssFeeds = [{\n  titulo: 'G1 - Todas as notícias',\n  urlFeed: 'http://g1.globo.com/dynamo/rss2.xml',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}, {\n  titulo: 'G1 - Brasil',\n  urlFeed: 'http://g1.globo.com/dynamo/brasil/rss2.xml',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}, {\n  titulo: 'G1 - Tecnologia e Games',\n  urlFeed: 'http://g1.globo.com/dynamo/tecnologia/rss2.xml',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}, {\n  titulo: 'Jovem Nerd - Site Completo',\n  urlFeed: 'http://jovemnerd.com.br/rss',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}];\n\nvar _createDataContext = createDataContext(feedListReducer, {\n  addFeed: addFeed,\n  deleteFeed: deleteFeed,\n  restoreState: restoreState,\n  deleteAll: deleteAll,\n  getAllFeed: getAllFeed,\n  getFeed: getFeed\n}, rssFeeds),\n    Context = _createDataContext.Context,\n    Provider = _createDataContext.Provider;\n\nexport { Context, Provider };","map":{"version":3,"sources":["E:/ResidenciaDEV/ReactNative/rss-react-native/src/context/FeedListContext.js"],"names":["createDataContext","AsyncStorage","saveFeeds","value","jsonValue","JSON","stringify","setItem","console","log","clearStorage","clear","alert","getMyFeed","getItem","parse","getAllKeys","keys","deleteItem","removeItem","feedListReducer","state","action","newState","type","urlFeed","payload","titulo","filter","feed","addFeed","dispatch","callback","getFeed","id","getAllFeed","deleteFeed","restoreState","KEY","savedState","deleteAll","rssFeeds","descricao","urlSite","urlImagem","Context","Provider"],"mappings":"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","sourcesContent":["import createDataContext from './createDataContext';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\n//Método da biblioteca AsyncStore. Ela só salva String, portanto para salvar \n//objetos é preciso serializá-los para JSON.\nconst saveFeeds = async (value) => {\n    try {\n        const jsonValue = JSON.stringify(value);\n        await AsyncStorage.setItem('key', jsonValue);\n        console.log('Feed salvo!');\n    } catch (e) {\n        console.log('erro: ' + e);\n    }\n}\n\n//Limpar os dados armazenados com a função própria clear\nconst clearStorage = async () => {\n    try {\n        await AsyncStorage.clear();\n        alert('Todos os feeds foram apagados');\n    }\n    catch (e) {\n        console.log(e);\n        alert('Algum problema ao limpar armazenamento');\n        console.log('erro: ' + e);\n    }\n}\n\n//Pegar um objeto armazenado\ngetMyFeed = async () => {\n    try {\n      const jsonValue = await AsyncStorage.getItem('@key')\n      return jsonValue != null ? JSON.parse(jsonValue) : null\n    } catch(e) {\n      alert(\"Algum problema ao buscar um feed\");\n    }\n  \n    console.log('Done.')\n  \n  }\n\n  //Vai buscar todas as chaves armazenadas no AsyncStorage\n  getAllKeys = async () => {\n    let keys = []\n    try {\n      keys = await AsyncStorage.getAllKeys()\n    } catch(e) {\n      alert('Houve algum erro ao recuperar os feeds');\n      console.log('Erro: ' + e);\n    }\n    console.log(keys)\n  }\n\n  deleteItem = async () => {\n    try {\n        await AsyncStorage.removeItem('@key')\n      } catch(e) {\n        alert('Houve algum problema ao apagar o feed');\n        console.log('Erro: ' + e);\n      }\n    \n      console.log('Done.')\n  }\n\nconst feedListReducer = (state, action) => {\n    let newState = [];\n    switch (action.type) {\n        case 'add_feed':\n            newState = [\n                ...state,\n                {\n                    urlFeed: action.payload.urlFeed,\n                    titulo: action.payload.titulo\n                }\n            ];\n            saveFeeds(newState)\n            return newState;\n        case 'delete_feed':\n            newState = state.filter(\n                (feed) => feed.urlFeed !== action.payload);\n            \n            deleteItem(newState);\n            return newState;\n        case 'restore_state':\n            newState = action.payload;\n            return newState;\n        case 'delete_all':\n            clearStorage();\n            return [];\n        case 'get_feed':\n            newState = state.filter(\n                (feed) => feed.urlFeed !== action.payload);\n            getMyFeed(newState);\n            return newState;\n        case 'get_all':\n            return getAllKeys();\n        default:\n            return state;\n    }\n};\n\nconst addFeed = dispatch => {\n    return (titulo, urlFeed, callback) => {\n        dispatch({ type: 'add_feed', payload: { titulo, urlFeed } });\n        if (callback) {\n            callback();\n        }\n        console.log('Salvou o feed');\n    };\n};\n\nconst getFeed = dispatch =>{\n    return(id, callback) => {\n        dispatch({type: 'get_feed', payload: id });\n        if(callback){\n            callback();\n        }\n        console.log('Feed i: ' + id);\n    }\n}\n\nconst getAllFeed = dispatch => {\n    return () => {\n        dispatch({ type: 'get_all' });\n    }\n\n}\n\nconst deleteFeed = dispatch => {\n    return (id) => {\n        dispatch({ type: 'delete_feed', payload: id });\n        console.log('deletou o feed');\n    };\n};\n\nconst restoreState = dispatch => async () => {\n    try {\n        const savedState = await AsyncStorage.getItem(KEY);\n        if (!savedState) {\n            console.log('não tem nada salvo');\n        }\n        else {\n            //console.log(savedState);\n            dispatch({ type: 'restore_state', payload: JSON.parse(savedState) })\n        }\n    } catch (e) {\n        console.log('erro: ' + e);\n    }\n}\n\nconst deleteAll = dispatch => {\n    return () => {\n        dispatch({ type: 'delete_all' })\n        console.log('Apagou tudo!');\n    }\n}\n\nconst rssFeeds = [\n    {\n        titulo: 'G1 - Todas as notícias',\n        urlFeed: 'http://g1.globo.com/dynamo/rss2.xml',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    },\n    {\n        titulo: 'G1 - Brasil',\n        urlFeed: 'http://g1.globo.com/dynamo/brasil/rss2.xml',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    },\n    {\n        titulo: 'G1 - Tecnologia e Games',\n        urlFeed: 'http://g1.globo.com/dynamo/tecnologia/rss2.xml',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    },\n    {\n        titulo: 'Jovem Nerd - Site Completo',\n        urlFeed: 'http://jovemnerd.com.br/rss',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    }\n    \n];\n\nexport const { Context, Provider } = createDataContext(\n    feedListReducer,\n    { addFeed, deleteFeed, restoreState, deleteAll, getAllFeed, getFeed },\n    rssFeeds\n);\n"]},"metadata":{},"sourceType":"module"}