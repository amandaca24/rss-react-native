{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from 'react';\nimport rssfeed from \"../api/rssfeed\";\nexport default (function () {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      resultados = _useState2[0],\n      setResultados = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      msgErro = _useState4[0],\n      setErro = _useState4[1];\n\n  var searchApi = function searchApi() {\n    var response;\n    return _regeneratorRuntime.async(function searchApi$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(rssfeed.get());\n\n          case 3:\n            response = _context.sent;\n            console.log('terminou busca');\n            setResultados(response.data.feeds);\n            setErro(null);\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            setErro('Houve algum erro');\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  useEffect(function () {\n    searchApi('');\n  }, []);\n  return [searchApi, resultados, msgErro];\n});","map":{"version":3,"sources":["E:/ResidenciaDEV/ReactNative/rss-react-native/src/hooks/useResults.js"],"names":["useEffect","useState","rssfeed","resultados","setResultados","msgErro","setErro","searchApi","get","response","console","log","data","feeds"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP;AAEA,gBAAe,YAAM;AAAA,kBACmBD,QAAQ,CAAC,EAAD,CAD3B;AAAA;AAAA,MACVE,UADU;AAAA,MACEC,aADF;;AAAA,mBAEUH,QAAQ,CAAC,IAAD,CAFlB;AAAA;AAAA,MAEVI,OAFU;AAAA,MAEDC,OAFC;;AAIjB,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEaL,OAAO,CAACM,GAAR,EAFb;;AAAA;AAEJC,YAAAA,QAFI;AAGVC,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAP,YAAAA,aAAa,CAACK,QAAQ,CAACG,IAAT,CAAcC,KAAf,CAAb;AACAP,YAAAA,OAAO,CAAC,IAAD,CAAP;AALU;AAAA;;AAAA;AAAA;AAAA;AAQVA,YAAAA,OAAO,CAAC,kBAAD,CAAP;AACAI,YAAAA,OAAO,CAACC,GAAR;;AATU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAaAX,EAAAA,SAAS,CAAC,YAAM;AACZO,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO,CAACA,SAAD,EAAYJ,UAAZ,EAAwBE,OAAxB,CAAP;AACH,CAtBD","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport rssfeed from '../api/rssfeed';\r\n\r\nexport default () => {\r\n    const [resultados, setResultados] = useState([]);\r\n    const [msgErro, setErro] = useState(null);\r\n    \r\n    const searchApi = async () => {\r\n        try {\r\n            const response = await rssfeed.get();\r\n            console.log('terminou busca');\r\n            setResultados(response.data.feeds)\r\n            setErro(null);\r\n        }\r\n        catch (err) { \r\n            setErro('Houve algum erro')\r\n            console.log(err); \r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        searchApi('')\r\n    }, []);\r\n\r\n    return [searchApi, resultados, msgErro];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}