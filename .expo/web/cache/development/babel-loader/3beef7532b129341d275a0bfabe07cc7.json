{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"E:\\\\ResidenciaDEV\\\\ReactNative\\\\rss-react-native\\\\src\\\\screens\\\\ShowFeedScreen.js\";\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler';\nimport { Context as FeedContext } from \"../context/FeedContext\";\nimport { useContext } from 'react';\n\nvar ShowFeedScreen = function ShowFeedScreen(_ref) {\n  var navigation = _ref.navigation;\n  var feedID = navigation.getParam('id');\n\n  var _useContext = useContext(FeedContext),\n      state = _useContext.state,\n      fetchItems = _useContext.fetchItems,\n      getFeed = _useContext.getFeed;\n\n  var abrirLink = function abrirLink(link) {\n    Linking.openURL(link).catch(function (err) {\n      return console.error('Ocorreu um erro: ', err);\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(FlatList, {\n    data: state.fetchItems,\n    keyExtractor: function keyExtractor(item) {\n      return item.link;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(React.Fragment, null, React.createElement(View, {\n        style: styles.row,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 29\n        }\n      }, React.createElement(Image, {\n        style: styles.image,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 33\n        }\n      }, item.image), React.createElement(Text, {\n        style: styles.titulo,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 33\n        }\n      }, item.titulo), React.createElement(Text, {\n        style: styles.dataPublicacao,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 33\n        }\n      }, item.dataPublicacao)), React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: styles.descricao,\n        numberOfLines: 2,\n        ellipsizeMode: \"tail\",\n        onPress: function onPress() {\n          return abrirLink(item.link);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 33\n        }\n      }, item.descricao)));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 20,\n    paddingHorizontal: 10,\n    borderTopWidth: 1,\n    borderColor: 'gray'\n  },\n  titulo: {\n    fontSize: 14,\n    fontWeight: 'bold'\n  },\n  image: {\n    width: 100,\n    height: 100,\n    borderRadius: 4,\n    margin: 5\n  },\n  descricao: {\n    fontSize: 8,\n    flex: 1\n  },\n  dataPublicacao: {\n    fontSize: 10,\n    fontStyle: 'italic'\n  },\n  icon: {\n    fontSize: 24\n  }\n});\nexport default ShowFeedScreen;","map":{"version":3,"sources":["E:/ResidenciaDEV/ReactNative/rss-react-native/src/screens/ShowFeedScreen.js"],"names":["React","FlatList","TouchableOpacity","Context","FeedContext","useContext","ShowFeedScreen","navigation","feedID","getParam","state","fetchItems","getFeed","abrirLink","link","Linking","openURL","catch","err","console","error","item","styles","row","image","titulo","dataPublicacao","descricao","StyleSheet","create","flexDirection","justifyContent","paddingVertical","paddingHorizontal","borderTopWidth","borderColor","fontSize","fontWeight","width","height","borderRadius","margin","flex","fontStyle","icon"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { View, Text, StyleSheet, Button, Image, Linking } from 'react-native';\r\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler';\r\nimport { Context as FeedContext } from '../context/FeedContext';\r\nimport { useContext } from 'react';\r\n\r\n\r\nconst ShowFeedScreen = ({ navigation }) => {\r\n    const feedID = navigation.getParam('id');\r\n    //const feed = feedListContext.state.find((feed) => feed.urlFeed === feedID);\r\n    //const fetch = rssfeed(feed.urlFeed);\r\n    const { state, fetchItems, getFeed } = useContext(FeedContext);\r\n\r\n    const abrirLink = (link) => {\r\n        Linking.openURL(link).catch((err) => console.error('Ocorreu um erro: ', err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FlatList\r\n                data={state.fetchItems}\r\n                keyExtractor={(item) => item.link}\r\n                renderItem={({ item }) => {\r\n                    //atualmente só exibe o título, faça com que apareça data de publicação, \r\n                    //descrição (pode cortar em 100 ou 200 caracteres para não ficar muito grande), e imagem (caso tenha)\r\n                    //ao clicar em uma notícia, devemos chamar a função abrirLink que direciona o usuário para o link da notícia\r\n                    return (\r\n                        <>\r\n                            <View style={styles.row}>\r\n                                <Image style={styles.image}>{item.image}</Image>\r\n                                <Text style={styles.titulo}>{item.titulo}</Text>\r\n                                <Text style={styles.dataPublicacao}>{item.dataPublicacao}</Text>\r\n                            </View>\r\n                            <View>\r\n                                <Text style={styles.descricao} numberOfLines={2} ellipsizeMode='tail' \r\n                                    onPress={() => abrirLink(item.link)}>\r\n                                        {item.descricao}\r\n                                </Text>\r\n\r\n                            </View>\r\n                        </>\r\n                    );\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\n//altere os estilos como desejar para melhorar o layout\r\nconst styles = StyleSheet.create({\r\n    row: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        paddingVertical: 20,\r\n        paddingHorizontal: 10,\r\n        borderTopWidth: 1,\r\n        borderColor: 'gray'\r\n    },\r\n    titulo: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold'\r\n    },\r\n    image: {\r\n        //pode alterar largura e altura como desejar\r\n        width: 100,\r\n        height: 100,\r\n        borderRadius: 4,\r\n        margin: 5\r\n    },\r\n    descricao: {\r\n        fontSize: 8, \r\n        flex: 1\r\n    },\r\n    dataPublicacao: {\r\n        fontSize: 10,\r\n        fontStyle: 'italic'\r\n    },\r\n    icon: {\r\n        fontSize: 24\r\n    }\r\n});\r\n\r\nexport default ShowFeedScreen;\r\n"]},"metadata":{},"sourceType":"module"}